CHOIX DES OUTILS

| Crit√®re                | Node.js + Express                                     | PHP + Laravel                                                      | Notre choix                                                           |
| ---------------------- | ----------------------------------------------------- | ------------------------------------------------------------------ | --------------------------------------------------------------------- |
| Langage                | JavaScript, unifi√© front/back                         | PHP c√¥t√© back, JS c√¥t√© front                                       | ‚úÖ JS unifi√© = coh√©rence et gain de temps                              |
| Poids / performance    | L√©ger, non-bloquant, asynchrone                       | Plus lourd, synchrone, moins fluide sans tuning                    | ‚úÖ API plus r√©active avec Node                                         |
| Courbe d‚Äôapprentissage | Express est minimaliste, tr√®s modulaire               | Laravel est puissant mais imposant, avec beaucoup de magie interne | ‚úÖ Express laisse plus de contr√¥le, parfait pour un projet p√©dagogique |
| √âcosyst√®me             | Parfait pour les APIs REST, tr√®s riche en middlewares | Laravel a beaucoup d‚Äôoutils int√©gr√©s, mais moins ‚ÄúAPI-first‚Äù       | ‚úÖ Express te permet d‚Äôapprendre √† tout configurer toi-m√™me            |
| Int√©gration front JS   | Directe (m√™me langage)                                | N√©cessite une API ou du templating server (Blade)                  | ‚úÖ Tu r√©utilises ton code JS c√¥t√© client & serveur                     |


| Crit√®re       | Prisma                                   | Sequelize / TypeORM                 | Doctrine (PHP)                         | Notre choix                                               |
| ------------- | ---------------------------------------- | ----------------------------------- | -------------------------------------- | --------------------------------------------------------- |
| Intuitivit√©   | Tr√®s lisible, DSL propre (schema.prisma) | Plus verbeux et moins typ√©          | Complexe, tr√®s verbeux                 | ‚úÖ Prisma : plus rapide √† prendre en main, et plus moderne |
| Migrations    | Automatis√©es avec aper√ßu clair           | Souvent manuelles ou moins visibles | Tr√®s rigide, lourd pour petits projets | ‚úÖ Prisma g√®re tout en douceur                             |
| Documentation | Ultra claire et interactive              | Moins intuitive (Sequelize)         | Complexe et orient√©e entreprise        | ‚úÖ Id√©al pour un projet de formation                       |
| Typage        | G√©n√®re des types auto pour TypeScript    | Moins solide sur ce plan            | PHP ‚Üí pas TS                           | ‚úÖ Prisma est fait pour Node moderne                       |


| Crit√®re            | PostgreSQL                         | MySQL                                      | Notre choix                                          |
| ------------------ | ---------------------------------- | ------------------------------------------ | ---------------------------------------------------- |
| Conformit√© SQL     | Tr√®s stricte, fid√®le au standard   | Plus permissif (peut masquer erreurs)      | ‚úÖ PostgreSQL = meilleur pour apprendre proprement    |
| Fonctions avanc√©es | Tr√®s riche (types JSON, g√©o, CTE‚Ä¶) | Moins riche (sur certains types)           | ‚úÖ PG offre + de souplesse pour des donn√©es complexes |
| Compatibilit√© ORM  | Excellente avec Prisma             | Compatible aussi                           | ‚úÖ Prisma est con√ßu *d‚Äôabord* pour PG                 |
| Stabilit√©          | Excellente pour projets complexes  | Tr√®s bien aussi, mais parfois moins rigide | ‚úÖ On privil√©gie la rigueur du standard SQL           |


| Crit√®re          | MongoDB                            | Autres NoSQL                                                                               | Notre choix                                                |
| ---------------- | ---------------------------------- | ------------------------------------------------------------------------------------------ | ---------------------------------------------------------- |
| Structure        | JSON souple (documents dynamiques) | Firebase = cloud & temps r√©el ; Redis = cl√©-valeur ; Cassandra = gros volume distribu√©     | ‚úÖ MongoDB = adapt√© √† nos logs/statistiques sans contrainte |
| Apprentissage    | Facile √† comprendre                | Firebase demande de g√©rer tout dans le cloud ; Redis est bas niveau ; Cassandra trop lourd | ‚úÖ MongoDB : parfait pour un √©tudiant fullstack             |
| Int√©gration Node | Mongoose, tr√®s bien int√©gr√©        | Firebase = SDK ; Redis = brut                                                              | ‚úÖ Node + Mongoose = fluide                                 |


Conclusion :

- Langage : Node.js + Express
- ORM : Prisma
- DB SQL : PostgreSQL
- DB NoSQL : MongoDB + Mongoose


SHEMA DE BASE DE DONNEES

SQL
| registered (**users**)       | concerts            | commandes                        | tickets                              |
| ---------------------------- | ------------------- | -------------------------------- | ------------------------------------ |
| id **PK**                    | id **PK**           | id **PK**                        | id **PK**                            |
| email - varchar (unique)     | ville - varchar     | user\_id - **FK ‚Üí users.id**     | concert\_id - **FK ‚Üí concerts.id**   |
| password - varchar           | date - date         | date\_commande - datetime        | commande\_id - **FK ‚Üí commandes.id** |
| role - enum(user/admin)      | lieu - varchar      | total - decimal                  | quantite - int                       |
| date\_inscription - datetime | places\_dispo - int | status - enum(en\_cours/valid√©e) | prix\_unitaire - decimal             |
|                              | prix - decimal      |                                  |                                      |

NoSQL
| logs (**collection**)                            | paniers\_temp                             | stats\_concerts                  |
| ------------------------------------------------ | ----------------------------------------- | -------------------------------- |
| \_id **PK (ObjectId)**                           | \_id **PK (ObjectId)**                    | \_id **PK (ObjectId)**           |
| type - string *(connexion, erreur, admin, etc.)* | user\_id - string *(ou session\_id)*      | concert\_id - string *(r√©f SQL)* |
| timestamp - datetime                             | items - array of `{concert_id, quantite}` | vues - int                       |
| user\_id - string *(r√©f SQL)*                    | timestamp - datetime                      | clics\_panier - int              |
| ip - string                                      |                                           | achats - int                     |
| route - string                                   |                                           |                                  |
| payload - object *(optionnel)*                   |                                           |                                  |


AVANCEMENT DU PROJET 

üß± 1. Initialisation du projet
Cr√©ation d‚Äôun dossier structur√© avec :

src/ contenant les sous-dossiers routes, controllers, models, middlewares, services, utils, validators

Fichiers root : .env, server.js, app.js, package.json, README.md

Installation des d√©pendances :
express, dotenv, mongoose, prisma, @prisma/client, nodemon, helmet, cors...

-----------------------------------------------------------------------------------------------------------------------------------

üóÉÔ∏è 2. Base de donn√©es SQL (PostgreSQL)
üìê Cr√©ation du fichier schema.prisma avec les mod√®les SQL (User, Concert, Commande, Ticket)

‚öôÔ∏è Configuration de la connexion √† PostgreSQL via Prisma (DATABASE_URL dans .env)

üß± Migration appliqu√©e avec succ√®s ‚Üí base PostgreSQL visible dans pgAdmin

------------------------------------------------------------------------------------------------------------------------------------

üçÉ 3. Base de donn√©es NoSQL (MongoDB)
Installation de MongoDB + Compass

Cr√©ation du fichier mongo.js pour connecter Mongoose

Connexion r√©ussie √† MongoDB avec URI locale

Ajout de la variable MONGO_URI dans .env

------------------------------------------------------------------------------------------------------------------------------------

üßæ 4. Logs dynamiques (MongoDB)
Cr√©ation du mod√®le Mongoose Log (type, date, user_id, ip, route, payload‚Ä¶)

Cr√©ation d‚Äôun middleware global logger.js

Loggue automatiquement chaque requ√™te entrante

Middleware branch√© sur l‚Äôapp Express dans app.js

Test valid√© via route /test ‚Üí logs bien ins√©r√©s dans MongoDB üéØ

------------------------------------------------------------------------------------------------------------------------------------

üß™ Tests Postman
Route /test appel√©e avec succ√®s

R√©ponse "OK !" obtenue

Log de la requ√™te visible en base Mongo
